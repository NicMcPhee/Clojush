Registered instructions: #{code_atom code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_pop string_substring integer_mult code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq vector_float_butlast exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot print_char vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_rot float_yankdup vector_string_rot zip_replace_fromexec vector_string_take integer_add vector_integer_occurrencesof integer_shove genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot float_fromchar float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop float_eq vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt return_integer_pop float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace integer_dup vector_boolean_nth vector_string_length string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete code_empty float_inc zip_right vector_float_length float_rand integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 2.0.64-SNAPSHOT
Hash of last Git commit = 28920bcc058ef272706c0736599f9d083ea077f0
GitHub link = https://github.com/lspector/Clojush/commit/28920bcc058ef272706c0736599f9d083ea077f0
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_do*while exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot integer_add integer_shove integer_max integer_stackdepth boolean_dup exec_eq integer_yank exec_while integer_min exec_swap exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup #object[clojush.problems.final_project_simondet.threevaluesum$fn__4165 0x4dac121d clojush.problems.final_project_simondet.threevaluesum$fn__4165@4dac121d] in1 in2 in3)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = -1
autoconstructive-integer-rand-enrichment = 1
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
epigenetic-markers = [:close]
error-function = #object[clojush.problems.final_project_simondet.threevaluesum$all_errors 0x2e7bf7b7 clojush.problems.final_project_simondet.threevaluesum$all_errors@2e7bf7b7]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:reproduction 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, [:alternation :uniform-mutation] 0.2, :uniform-mutation 0.1, :uniform-silence-mutation 0.0, :autoconstruction 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 100
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x78ec89a6 clojush.pushgp.report$default_problem_specific_report@78ec89a6]
random-seed = -24 7 -110 30 -42 2 -20 20 118 -14 123 27 42 74 2 -20
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
save-initial-population = false
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
trivial-geography-radius = 0
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction 24} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_stackdepth 24 integer_yankdup in1 exec_yankdup integer_lte integer_flush integer_shove boolean_yank exec_s (integer_sub exec_rot (in2 integer_gt boolean_or integer_sub boolean_rot boolean_eq integer_empty integer_dup) (integer_min integer_inc integer_shove integer_min) (integer_lte exec_yankdup integer_flush exec_yank) integer_mult) () ())
Lexicase best partial simplification: (in2 integer_inc)
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.194
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction 24} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_stackdepth 24 integer_yankdup in1 exec_yankdup integer_lte integer_flush integer_shove boolean_yank exec_s (integer_sub exec_rot (in2 integer_gt boolean_or integer_sub boolean_rot boolean_eq integer_empty integer_dup) (integer_min integer_inc integer_shove integer_min) (integer_lte exec_yankdup integer_flush exec_yank) integer_mult) () ())
Zero cases best partial simplification: (in2 integer_inc)
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 4 10 8 5 4 3 10 11 10)
Population mean number of elite cases: 0.08
Count of perfect (error zero) individuals by case: (10 4 10 8 5 4 3 10 11 10)
Population mean number of perfect (error zero) cases: 0.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction 3} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction 8} {:close 1, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (exec_shove (3) in2 integer_mult integer_mult exec_flush integer_dup exec_empty exec_swap (in1 boolean_stackdepth exec_do*times (exec_y (exec_pop () in3) exec_swap (integer_lte boolean_swap boolean_yankdup integer_sub exec_do*times (exec_stackdepth boolean_yank exec_empty exec_swap (integer_div integer_rot integer_swap integer_dup integer_max integer_gte boolean_and exec_shove (exec_empty 8 exec_k () (exec_s () (integer_eq exec_pop (integer_dec) in2 integer_mult integer_dec) ()))) ())) ())) ())
Partial simplification: (3 in2 integer_mult)
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 43
Size: 62
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 9.925
Median total errors in population: 10
Error averages by case: (0.99 0.996 0.99 0.992 0.995 0.996 0.997 0.99 0.989 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.499
Average program size in population (points): 34.577
Average percent parens in population: 0.263
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 321293
--- Timings ---
Current time: 1461796622841 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction 3} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction 8} {:close 1, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (exec_shove (3) in2 integer_mult integer_mult exec_flush integer_dup exec_empty exec_swap (in1 boolean_stackdepth exec_do*times (exec_y (exec_pop () in3) exec_swap (integer_lte boolean_swap boolean_yankdup integer_sub exec_do*times (exec_stackdepth boolean_yank exec_empty exec_swap (integer_div integer_rot integer_swap integer_dup integer_max integer_gte boolean_and exec_shove (exec_empty 8 exec_k () (exec_s () (integer_eq exec_pop (integer_dec) in2 integer_mult integer_dec) ()))) ())) ())) ())
Lexicase best partial simplification: (3 in2 integer_mult)
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.306
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction 3} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction 8} {:close 1, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (exec_shove (3) in2 integer_mult integer_mult exec_flush integer_dup exec_empty exec_swap (in1 boolean_stackdepth exec_do*times (exec_y (exec_pop () in3) exec_swap (integer_lte boolean_swap boolean_yankdup integer_sub exec_do*times (exec_stackdepth boolean_yank exec_empty exec_swap (integer_div integer_rot integer_swap integer_dup integer_max integer_gte boolean_and exec_shove (exec_empty 8 exec_k () (exec_s () (integer_eq exec_pop (integer_dec) in2 integer_mult integer_dec) ()))) ())) ())) ())
Zero cases best partial simplification: (3 in2 integer_mult)
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (444 346 316 316 346 346 73 138 358 358)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (444 346 316 316 346 346 73 138 358 358)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction 24} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult})
Best program: (exec_stackdepth 24 integer_yankdup in1 exec_yankdup integer_lte integer_flush integer_shove boolean_yank exec_s (integer_sub exec_rot (in2 integer_gt boolean_or integer_sub boolean_rot boolean_eq integer_empty integer_dup) (integer_min integer_inc integer_shove integer_min) (integer_lte exec_yankdup integer_flush exec_yank) integer_mult) () ())
Partial simplification: (in2 integer_inc)
Errors: [1 1 0 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.959
Median total errors in population: 6
Error averages by case: (0.556 0.654 0.684 0.684 0.654 0.654 0.927 0.862 0.642 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.966
Average program size in population (points): 40.991
Average percent parens in population: 0.261
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 244
Genome diversity (% unique Plush genomes):	 0.296
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.296
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 562171
--- Timings ---
Current time: 1461796626126 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Lexicase best partial simplification: (integer_gte integer_yankdup 28 in1 exec_do*times (exec_rot () (integer_gte (exec_stackdepth exec_while (integer_add exec_flush integer_lte 22)) ()) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.339
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Zero cases best partial simplification: (exec_when 28 in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while ((exec_flush))) () ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (430 330 333 334 330 330 72 180 412 413)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (430 330 333 334 330 330 72 180 412 413)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Partial simplification: (in1 exec_do*times (() (integer_gte exec_rot (exec_stackdepth exec_while (exec_stackdepth exec_flush)) () ())))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 59
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 6.836
Median total errors in population: 6
Error averages by case: (0.57 0.67 0.667 0.666 0.67 0.67 0.928 0.82 0.588 0.587)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.872
Average program size in population (points): 39.398
Average percent parens in population: 0.261
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 182
Genome diversity (% unique Plush genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 807211
--- Timings ---
Current time: 1461796629704 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Lexicase best partial simplification: ((28) integer_mult in1 exec_do*times (exec_rot (integer_gte exec_rot (exec_stackdepth exec_while (exec_flush)) () ())))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.339
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Zero cases best partial simplification: (boolean_and boolean_or boolean_and (28 exec_noop) in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while ((exec_flush) ())) () ()) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 322 413 428 320 322 88 313 214 462)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (583 322 413 428 320 322 88 313 214 462)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Partial simplification: (boolean_and integer_yankdup integer_rot 28 exec_noop integer_fromboolean in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while ((exec_rot integer_inc (integer_add) (exec_flush integer_yank boolean_flush)) exec_shove ())) () ()) ()))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 59
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 6.535
Median total errors in population: 6
Error averages by case: (0.417 0.678 0.587 0.572 0.68 0.678 0.912 0.687 0.786 0.538)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.457
Average program size in population (points): 47.269
Average percent parens in population: 0.282
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 204
Genome diversity (% unique Plush genomes):	 0.419
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1072670
--- Timings ---
Current time: 1461796633425 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Lexicase best partial simplification: (integer_rot 28 in1 exec_do*times (exec_rot () (integer_gte (exec_stackdepth exec_while (exec_rot integer_min exec_flush)) ()) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.339
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Zero cases best partial simplification: (28 in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (() (exec_flush boolean_flush))) () ()) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (566 321 393 511 318 324 100 295 216 439)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (566 321 393 511 318 324 100 295 216 439)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Partial simplification: (boolean_and 28 in1 exec_do*times (exec_rot () (integer_gte (exec_stackdepth exec_while (exec_rot integer_inc exec_flush)) ()) ()))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 59
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 6.517
Median total errors in population: 6
Error averages by case: (0.434 0.679 0.607 0.489 0.682 0.676 0.9 0.705 0.784 0.561)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.195
Average program size in population (points): 46.567
Average percent parens in population: 0.299
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 142
Genome diversity (% unique Plush genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1333911
--- Timings ---
Current time: 1461796637206 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Lexicase best partial simplification: (28 boolean_flush integer_fromboolean in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot boolean_invert_second_then_and exec_flush)) () ()) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.339
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Zero cases best partial simplification: (28 exec_noop in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot exec_flush)) () ()) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (568 223 364 515 301 419 104 251 235 348)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (568 223 364 515 301 419 104 251 235 348)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Partial simplification: (integer_yank 28 in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (((exec_flush integer_yank)))) () ()) ()))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 59
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 6.672
Median total errors in population: 6
Error averages by case: (0.432 0.777 0.636 0.485 0.699 0.581 0.896 0.749 0.765 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.116
Average program size in population (points): 49.715
Average percent parens in population: 0.305
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.006
Error (vector) diversity:			 0.032
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1692290
--- Timings ---
Current time: 1461796641179 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction 38} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup exec_noop integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank 38)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Lexicase best partial simplification: (28 in1 exec_do*times (exec_rot (integer_gte exec_rot (exec_stackdepth exec_while ((integer_min exec_flush) exec_shove)) () ())))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.339
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction 38} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup exec_noop integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank 38)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Zero cases best partial simplification: (28 boolean_flush integer_fromboolean in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (integer_add exec_flush 38 exec_shove)) () ()) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (517 225 407 553 177 478 296 286 268 350)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (517 225 407 553 177 478 296 286 268 350)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 22} {:close 0, :instruction exec_k})
Best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank exec_if () (integer_inc) integer_add boolean_yank integer_min) (boolean_invert_second_then_and exec_flush integer_yank boolean_flush)) (exec_shove () integer_lte exec_do*times (22 exec_k () ())) ())) () ()) ()))
Partial simplification: (integer_gte 28 integer_fromboolean integer_mult in1 exec_do*times (integer_gte (exec_stackdepth exec_while (exec_rot exec_stackdepth (boolean_yank integer_add) (boolean_invert_second_then_and exec_flush) (22))) ()))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 65
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 6.443
Median total errors in population: 6
Error averages by case: (0.483 0.775 0.593 0.447 0.823 0.522 0.704 0.714 0.732 0.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.959
Average program size in population (points): 54.453
Average percent parens in population: 0.314
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 129
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.006
Error (vector) diversity:			 0.032
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2183288
--- Timings ---
Current time: 1461796645386 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (in3 in1 exec_do*times (exec_rot (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot in2 integer_mult)) () ())))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (in3 integer_yankdup integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_inc) boolean_yank (boolean_invert_second_then_and in2 integer_mult integer_dec))) () ()))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (554 192 516 503 214 440 282 308 296 349)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (554 192 516 503 214 440 282 308 296 349)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot exec_s (exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (integer_dec integer_yankdup) integer_dec) integer_yank boolean_or) (integer_rot boolean_and exec_when (28 boolean_flush exec_do*while (integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ()))) ())
Partial simplification: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot exec_s (exec_when (28 boolean_flush exec_noop integer_fromboolean) in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (integer_dec integer_yankdup) integer_dec) integer_yank boolean_or) integer_rot boolean_and exec_when (28 boolean_flush (integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())) ())
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 66
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.346
Median total errors in population: 6
Error averages by case: (0.446 0.808 0.484 0.497 0.786 0.56 0.718 0.692 0.704 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.295
Average program size in population (points): 54.032
Average percent parens in population: 0.324
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 105
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.006
Error (vector) diversity:			 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2708590
--- Timings ---
Current time: 1461796649887 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot exec_s (exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (integer_dec integer_yankdup) integer_dec) integer_yank boolean_or) (integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())) ())
Lexicase best partial simplification: (boolean_and integer_gte integer_dec integer_yankdup integer_yank boolean_or integer_rot exec_s (exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (integer_dec integer_yankdup) integer_dec) integer_yank boolean_or) (integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth) () ())) () ()) ())) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.323
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot exec_s (exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (integer_dec integer_yankdup) integer_dec) integer_yank boolean_or) (integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())) ())
Zero cases best partial simplification: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot exec_s (exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (integer_dec integer_yankdup) integer_dec) integer_yank boolean_or) (integer_rot boolean_and exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 220 496 460 205 483 345 303 347 347)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (531 220 496 460 205 483 345 303 347 347)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (boolean_and in3 in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while ((exec_rot integer_inc integer_min (in2 integer_mult integer_dec)) ())) () ()))
Errors: [0 1 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 6.263
Median total errors in population: 6
Error averages by case: (0.469 0.78 0.504 0.54 0.795 0.517 0.655 0.697 0.653 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.719
Average program size in population (points): 54.692
Average percent parens in population: 0.324
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.006
Error (vector) diversity:			 0.038
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3237028
--- Timings ---
Current time: 1461796654608 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 integer_yankdup) integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_if (exec_rot (exec_rot (exec_stackdepth) () ()) () ()) ()) () ()) ()))
Lexicase best partial simplification: (integer_gte integer_dec integer_dec integer_yank boolean_or boolean_and exec_when in1 exec_do*times (exec_rot () (boolean_and integer_gte) (in3 integer_yankdup) integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_if (exec_rot exec_rot (exec_stackdepth) () () () ()) ()) () ()) ()))
Lexicase best errors: [0 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.333
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 integer_yankdup) integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_if (exec_rot (exec_rot (exec_stackdepth) () ()) () ()) ()) () ()) ()))
Zero cases best partial simplification: (integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or exec_when (boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 integer_yankdup) integer_dec) boolean_or integer_rot boolean_and 28 boolean_flush integer_fromboolean integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_if (exec_rot (exec_rot (exec_stackdepth) () ()) () ()) ()) () ()) ()))
Zero cases best errors: [0 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (474 199 468 422 201 393 296 341 399 388)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (474 199 468 422 201 393 296 341 399 388)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 integer_yankdup) integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_if (exec_rot (exec_rot (exec_stackdepth) () ()) () ()) ()) () ()) ()))
Partial simplification: (integer_gte integer_dec integer_dec integer_yank boolean_or boolean_and exec_when (28 boolean_flush exec_noop) integer_mult in1 exec_do*times (() (integer_gte boolean_and integer_gte) (in3 integer_yankdup) integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_if (exec_rot (exec_rot (exec_stackdepth) () ()) () ()) ()) () ()) ()))
Errors: [0 1 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 66
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.419
Median total errors in population: 6
Error averages by case: (0.526 0.801 0.532 0.578 0.799 0.607 0.704 0.659 0.601 0.612)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.929
Average program size in population (points): 55.263
Average percent parens in population: 0.326
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.006
Error (vector) diversity:			 0.041
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3785765
--- Timings ---
Current time: 1461796659735 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and boolean_and in3 integer_yankdup integer_mult in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()))))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (497 212 462 422 234 450 310 333 375 361)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (497 212 462 422 234 450 310 333 375 361)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth integer_yank integer_inc) boolean_yank (in2 integer_mult integer_dec))) () ()) ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 6.344
Median total errors in population: 6
Error averages by case: (0.503 0.788 0.538 0.578 0.766 0.55 0.69 0.667 0.625 0.639)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.636
Average program size in population (points): 54.906
Average percent parens in population: 0.327
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.007
Error (vector) diversity:			 0.041
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4332038
--- Timings ---
Current time: 1461796664634 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 in1 exec_do*times integer_dec boolean_or boolean_and exec_do*times (() in3 integer_fromboolean in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and boolean_and integer_gte in3 in1 exec_do*times integer_dec integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot integer_mod exec_stackdepth () ())) () ()) ())))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (574 347 573 581 320 458 246 331 411 334)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (574 347 573 581 320 458 246 331 411 334)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (integer_yank integer_inc) integer_min (in2 integer_mult integer_dec)))) () ()) ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 5.825
Median total errors in population: 5
Error averages by case: (0.426 0.653 0.427 0.419 0.68 0.542 0.754 0.669 0.589 0.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.593
Average program size in population (points): 52.481
Average percent parens in population: 0.339
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 240
Genome diversity (% unique Plush genomes):	 0.386
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.386
Total error diversity:				 0.007
Error (vector) diversity:			 0.046
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4974659
--- Timings ---
Current time: 1461796669511 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_stackdepth integer_yank (in2 integer_mult))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (in3 exec_yankdup in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while ((integer_min in2 integer_mult))) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (530 318 530 612 239 367 290 384 446 342)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (530 318 530 612 239 367 290 384 446 342)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth integer_yank integer_inc) integer_min (boolean_invert_second_then_and in2 integer_mult integer_dec))) () ()) ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 5.942
Median total errors in population: 5
Error averages by case: (0.47 0.682 0.47 0.388 0.761 0.633 0.71 0.616 0.554 0.658)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.573
Average program size in population (points): 54.654
Average percent parens in population: 0.329
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 158
Genome diversity (% unique Plush genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.007
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5659711
--- Timings ---
Current time: 1461796674081 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times integer_dec integer_yank boolean_and exec_when 28 boolean_flush exec_noop integer_fromboolean integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (543 359 544 641 273 320 289 380 435 340)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (543 359 544 641 273 320 289 380 435 340)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (boolean_and integer_gte in3 integer_mult in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth) () ())) () ()) ())))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.876
Median total errors in population: 5
Error averages by case: (0.457 0.641 0.456 0.359 0.727 0.68 0.711 0.62 0.565 0.66)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.898
Average program size in population (points): 55.268
Average percent parens in population: 0.331
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 164
Genome diversity (% unique Plush genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.007
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6363295
--- Timings ---
Current time: 1461796679430 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_inc) () (boolean_invert_second_then_and in2 integer_mult integer_dec))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (in3 exec_yankdup in1 exec_do*times ((integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth integer_yank integer_inc) () (boolean_invert_second_then_and in2 integer_mult integer_dec))) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (542 329 542 615 223 308 266 358 444 307)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (542 329 542 615 223 308 266 358 444 307)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (in3 exec_yankdup in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (boolean_yank integer_min in2 integer_mult)) () ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 6.066
Median total errors in population: 5
Error averages by case: (0.458 0.671 0.458 0.385 0.777 0.692 0.734 0.642 0.556 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.606
Average program size in population (points): 54.167
Average percent parens in population: 0.324
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 144
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.007
Error (vector) diversity:			 0.062
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7060447
--- Timings ---
Current time: 1461796684030 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot integer_inc boolean_yank (in2 integer_mult integer_dec))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_yank integer_inc) boolean_yank (in2 integer_mult integer_dec))) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (582 311 580 561 237 349 303 429 492 304)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (582 311 580 561 237 349 303 429 492 304)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot integer_inc (integer_add integer_min) (in2 integer_mult integer_dec))) () ()) ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 5.852
Median total errors in population: 5
Error averages by case: (0.418 0.689 0.42 0.439 0.763 0.651 0.697 0.571 0.508 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.692
Average program size in population (points): 53.73
Average percent parens in population: 0.336
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 128
Genome diversity (% unique Plush genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.007
Error (vector) diversity:			 0.07
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7773318
--- Timings ---
Current time: 1461796688723 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (integer_gte in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while ((in2 integer_mult))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (in3 exec_yankdup in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_yank integer_inc) integer_min (in2 integer_mult integer_dec))) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 331 584 543 245 342 309 402 496 295)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (583 331 584 543 245 342 309 402 496 295)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.87
Median total errors in population: 5
Error averages by case: (0.417 0.669 0.416 0.457 0.755 0.658 0.691 0.598 0.504 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.431
Average program size in population (points): 53.198
Average percent parens in population: 0.333
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 132
Genome diversity (% unique Plush genomes):	 0.419
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.007
Error (vector) diversity:			 0.061
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8481857
--- Timings ---
Current time: 1461796693696 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.390
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot integer_mod exec_stackdepth () ())) () ()) ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (586 339 613 562 223 380 342 458 529 310)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (586 339 613 562 223 380 342 458 529 310)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth) () ())) () ()) ())))
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 41
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 5.658
Median total errors in population: 5
Error averages by case: (0.414 0.661 0.387 0.438 0.777 0.62 0.658 0.542 0.471 0.69)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.838
Average program size in population (points): 53.48
Average percent parens in population: 0.331
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 124
Genome diversity (% unique Plush genomes):	 0.399
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.399
Total error diversity:				 0.007
Error (vector) diversity:			 0.075
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9186015
--- Timings ---
Current time: 1461796698934 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (integer_yank integer_inc) integer_min (in2 integer_mult integer_dec)))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth integer_yank integer_inc) integer_add (boolean_invert_second_then_and in2 integer_mult integer_dec))) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 360 603 537 223 418 291 448 514 310)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (573 360 603 537 223 418 291 448 514 310)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (boolean_and in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (boolean_yank (boolean_invert_second_then_and in2 integer_mult) ())) () ()) ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 5.723
Median total errors in population: 5
Error averages by case: (0.427 0.64 0.397 0.463 0.777 0.582 0.709 0.552 0.486 0.69)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.501
Average program size in population (points): 52.829
Average percent parens in population: 0.327
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 120
Genome diversity (% unique Plush genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.007
Error (vector) diversity:			 0.07
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9882317
--- Timings ---
Current time: 1461796703655 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.321
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 358 609 534 219 410 290 453 469 295)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (614 358 609 534 219 410 290 453 469 295)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Partial simplification: (boolean_and integer_gte in3 integer_mult in1 exec_do*times integer_yank integer_mult in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 59
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 5.749
Median total errors in population: 5
Error averages by case: (0.386 0.642 0.391 0.466 0.781 0.59 0.71 0.547 0.531 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.118
Average program size in population (points): 51.205
Average percent parens in population: 0.335
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 120
Genome diversity (% unique Plush genomes):	 0.407
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.007
Error (vector) diversity:			 0.072
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10579100
--- Timings ---
Current time: 1461796709023 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yankdup boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (integer_dec integer_yankdup in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_inc) (boolean_yank) (in2 integer_mult integer_dec))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.333
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte integer_dec integer_yankdup integer_dec integer_yankdup boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (integer_yankdup integer_gte in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (in2 integer_mult)) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (610 340 605 522 209 391 318 464 497 317)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (610 340 605 522 209 391 318 464 497 317)
Population mean number of perfect (error zero) cases: 4.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 41
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 5.727
Median total errors in population: 5
Error averages by case: (0.39 0.66 0.395 0.478 0.791 0.609 0.682 0.536 0.503 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.304
Average program size in population (points): 51.394
Average percent parens in population: 0.334
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.007
Error (vector) diversity:			 0.071
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 11281435
--- Timings ---
Current time: 1461796713960 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (boolean_and in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_inc) () (boolean_invert_second_then_and in2 integer_mult integer_dec))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (integer_gte in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_stackdepth exec_while (exec_rot (exec_rot integer_inc () (boolean_invert_second_then_and in2 integer_mult integer_dec))) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (599 342 588 498 228 397 309 437 492 325)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (599 342 588 498 228 397 309 437 492 325)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (() (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot integer_mod exec_stackdepth () ())) () ()))))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.785
Median total errors in population: 5
Error averages by case: (0.401 0.658 0.412 0.502 0.772 0.603 0.691 0.563 0.508 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.468
Average program size in population (points): 51.493
Average percent parens in population: 0.331
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 98
Genome diversity (% unique Plush genomes):	 0.406
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.007
Error (vector) diversity:			 0.068
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 11986968
--- Timings ---
Current time: 1461796718853 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (integer_mult in1 exec_do*times (exec_rot () (boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.432
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in1 exec_do*times (exec_rot () (integer_gte boolean_and) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.432
--- Lexicase Population Statistics ---
Count of elite individuals by case: (616 357 606 501 211 448 331 460 531 346)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (616 357 606 501 211 448 331 460 531 346)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in1 exec_do*times (integer_dec) integer_yank integer_rot boolean_and exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.593
Median total errors in population: 5
Error averages by case: (0.384 0.643 0.394 0.499 0.789 0.552 0.669 0.54 0.469 0.654)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.758
Average program size in population (points): 51.873
Average percent parens in population: 0.331
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.387
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.387
Total error diversity:				 0.007
Error (vector) diversity:			 0.072
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 12707648
--- Timings ---
Current time: 1461796724095 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot integer_eq exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot integer_eq exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.321
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot integer_eq exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times integer_dec integer_yank boolean_or integer_rot integer_eq exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (599 340 618 499 186 403 307 439 485 316)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (599 340 618 499 186 403 307 439 485 316)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times (integer_dec) integer_yank boolean_or integer_sub boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_add) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in1 exec_do*times integer_dec integer_yank boolean_or integer_sub boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_add) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.808
Median total errors in population: 5
Error averages by case: (0.401 0.66 0.382 0.501 0.814 0.597 0.693 0.561 0.515 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.767
Average program size in population (points): 52.038
Average percent parens in population: 0.334
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.007
Error (vector) diversity:			 0.075
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 13424937
--- Timings ---
Current time: 1461796729495 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Lexicase best partial simplification: (in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (in2 integer_mult)) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.385
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Zero cases best partial simplification: (in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot integer_inc () (in2 integer_mult integer_dec))) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (637 370 647 515 226 402 310 457 515 314)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (637 370 647 515 226 402 310 457 515 314)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (integer_gte in3 exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot integer_add (in2 integer_mult)))) () ()) ()))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 5.607
Median total errors in population: 5
Error averages by case: (0.363 0.63 0.353 0.485 0.774 0.598 0.69 0.543 0.485 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.043
Average program size in population (points): 52.41
Average percent parens in population: 0.332
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.007
Error (vector) diversity:			 0.079
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 14137555
--- Timings ---
Current time: 1461796734194 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush exec_noop in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush exec_noop in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.304
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush exec_noop in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush exec_noop in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (605 378 616 514 207 413 353 410 514 305)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (605 378 616 514 207 413 353 410 514 305)
Population mean number of perfect (error zero) cases: 4.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush exec_noop in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush exec_noop in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 1 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 56
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.685
Median total errors in population: 5
Error averages by case: (0.395 0.622 0.384 0.486 0.793 0.587 0.647 0.59 0.486 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.962
Average program size in population (points): 52.003
Average percent parens in population: 0.329
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 68
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.007
Error (vector) diversity:			 0.082
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 14854731
--- Timings ---
Current time: 1461796739601 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.310
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and integer_gte boolean_and integer_yankdup in2 in3 integer_mult in3 exec_do*times integer_dec integer_yank integer_rot boolean_and exec_when 28 boolean_flush exec_noop integer_fromboolean integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (631 366 638 525 211 397 339 402 506 289)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (631 366 638 525 211 397 339 402 506 289)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Best program: (integer_mult boolean_and boolean_and boolean_and integer_gte in3 integer_yankdup exec_yankdup in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (exec_rot (exec_stackdepth integer_yank integer_inc) (integer_add boolean_yank integer_min) (boolean_invert_second_then_and in2 integer_mult integer_dec)) () ())) () ()) ()))
Partial simplification: (in3 integer_yankdup exec_yankdup in1 exec_do*times ((integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_inc) integer_add (in2 integer_mult integer_dec))) () ())))
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 5.696
Median total errors in population: 5
Error averages by case: (0.369 0.634 0.362 0.475 0.789 0.603 0.661 0.598 0.494 0.711)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.888
Average program size in population (points): 52.097
Average percent parens in population: 0.332
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.007
Error (vector) diversity:			 0.08
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 15586070
--- Timings ---
Current time: 1461796744834 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction 85} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush 85 in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush 85 in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.304
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction 85} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush 85 in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (boolean_and boolean_and integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and integer_gt 28 boolean_flush 85 in2 integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (630 372 643 540 195 422 363 411 490 315)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (630 372 643 540 195 422 363 411 490 315)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_and integer_gte boolean_and integer_yankdup in2 in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (integer_gte boolean_and in2 in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 58
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 5.619
Median total errors in population: 4
Error averages by case: (0.37 0.628 0.357 0.46 0.805 0.578 0.637 0.589 0.51 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.636
Average program size in population (points): 51.437
Average percent parens in population: 0.330
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.007
Error (vector) diversity:			 0.088
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 16324894
--- Timings ---
Current time: 1461796750316 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (610 363 616 517 198 410 343 410 498 313)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (610 363 616 517 198 410 343 410 498 313)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.722
Median total errors in population: 5
Error averages by case: (0.39 0.637 0.384 0.483 0.802 0.59 0.657 0.59 0.502 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.979
Average program size in population (points): 51.976
Average percent parens in population: 0.329
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.008
Error (vector) diversity:			 0.08
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 17065647
--- Timings ---
Current time: 1461796755779 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot integer_mod exec_stackdepth () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (648 427 655 568 206 428 383 371 556 314)
Population mean number of elite cases: 4.56
Count of perfect (error zero) individuals by case: (648 427 655 568 206 428 383 371 556 314)
Population mean number of perfect (error zero) cases: 4.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.444
Median total errors in population: 5
Error averages by case: (0.352 0.573 0.345 0.432 0.794 0.572 0.617 0.629 0.444 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.044
Average program size in population (points): 53.413
Average percent parens in population: 0.327
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 120
Genome diversity (% unique Plush genomes):	 0.416
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.008
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 17820858
--- Timings ---
Current time: 1461796761295 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (632 392 651 565 203 429 334 381 509 296)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (632 392 651 565 203 429 334 381 509 296)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.608
Median total errors in population: 5
Error averages by case: (0.368 0.608 0.349 0.435 0.797 0.571 0.666 0.619 0.491 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.466
Average program size in population (points): 52.523
Average percent parens in population: 0.327
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.008
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 18564331
--- Timings ---
Current time: 1461796766780 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (634 395 652 574 208 436 317 380 501 283)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (634 395 652 574 208 436 317 380 501 283)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.62
Median total errors in population: 5
Error averages by case: (0.366 0.605 0.348 0.426 0.792 0.564 0.683 0.62 0.499 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.306
Average program size in population (points): 52.324
Average percent parens in population: 0.326
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.008
Error (vector) diversity:			 0.077
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 19299229
--- Timings ---
Current time: 1461796772254 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (625 379 627 584 231 428 334 380 510 312)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (625 379 627 584 231 428 334 380 510 312)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.59
Median total errors in population: 5
Error averages by case: (0.375 0.621 0.373 0.416 0.769 0.572 0.666 0.62 0.49 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.509
Average program size in population (points): 52.705
Average percent parens in population: 0.328
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 91
Genome diversity (% unique Plush genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.008
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 20042329
--- Timings ---
Current time: 1461796777712 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (643 390 650 620 216 428 388 371 577 338)
Population mean number of elite cases: 4.62
Count of perfect (error zero) individuals by case: (643 390 650 620 216 428 388 371 577 338)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 boolean_xor integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 boolean_xor integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.379
Median total errors in population: 5
Error averages by case: (0.357 0.61 0.35 0.38 0.784 0.572 0.612 0.629 0.423 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.234
Average program size in population (points): 55.421
Average percent parens in population: 0.310
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 115
Genome diversity (% unique Plush genomes):	 0.428
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.008
Error (vector) diversity:			 0.092
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 20843744
--- Timings ---
Current time: 1461796783280 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 372 646 575 241 397 318 377 495 335)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (639 372 646 575 241 397 318 377 495 335)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.605
Median total errors in population: 5
Error averages by case: (0.361 0.628 0.354 0.425 0.759 0.603 0.682 0.623 0.505 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.633
Average program size in population (points): 54.58
Average percent parens in population: 0.311
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.008
Error (vector) diversity:			 0.081
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 21622073
--- Timings ---
Current time: 1461796788865 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (642 358 658 599 222 414 320 372 557 354)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (642 358 658 599 222 414 320 372 557 354)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.504
Median total errors in population: 5
Error averages by case: (0.358 0.642 0.342 0.401 0.778 0.586 0.68 0.628 0.443 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.852
Average program size in population (points): 54.633
Average percent parens in population: 0.305
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 125
Genome diversity (% unique Plush genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.008
Error (vector) diversity:			 0.081
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 22409332
--- Timings ---
Current time: 1461796794399 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (645 368 663 615 205 419 307 357 537 327)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (645 368 663 615 205 419 307 357 537 327)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.557
Median total errors in population: 5
Error averages by case: (0.355 0.632 0.337 0.385 0.795 0.581 0.693 0.643 0.463 0.673)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.134
Average program size in population (points): 55.181
Average percent parens in population: 0.309
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 123
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.008
Error (vector) diversity:			 0.086
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 23206961
--- Timings ---
Current time: 1461796800039 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_swap in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (640 389 660 575 196 397 350 366 566 328)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (640 389 660 575 196 397 350 366 566 328)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when 28 boolean_flush exec_noop integer_fromboolean integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.533
Median total errors in population: 5
Error averages by case: (0.36 0.611 0.34 0.425 0.804 0.603 0.65 0.634 0.434 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.113
Average program size in population (points): 55.066
Average percent parens in population: 0.307
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.008
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 24006936
--- Timings ---
Current time: 1461796805569 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_pop integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_pop integer_rot boolean_and exec_when (boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_pop integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_mult in3 exec_do*times integer_dec integer_yank boolean_pop integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (636 380 658 597 222 392 323 352 554 347)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (636 380 658 597 222 392 323 352 554 347)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (boolean_dup exec_stackdepth) () ())) () ())))
Partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (boolean_dup exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.539
Median total errors in population: 5
Error averages by case: (0.364 0.62 0.342 0.403 0.778 0.608 0.677 0.648 0.446 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.546
Average program size in population (points): 55.803
Average percent parens in population: 0.309
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.008
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 24816102
--- Timings ---
Current time: 1461796811112 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot integer_mod exec_stackdepth () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (689 411 693 638 244 413 313 348 512 312)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (689 411 693 638 244 413 313 348 512 312)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.427
Median total errors in population: 5
Error averages by case: (0.311 0.589 0.307 0.362 0.756 0.587 0.687 0.652 0.488 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.579
Average program size in population (points): 54.326
Average percent parens in population: 0.309
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.008
Error (vector) diversity:			 0.091
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 25606530
--- Timings ---
Current time: 1461796816638 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (664 350 669 601 226 364 325 399 510 366)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (664 350 669 601 226 364 325 399 510 366)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_pop integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_pop integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot integer_mod exec_stackdepth () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.526
Median total errors in population: 5
Error averages by case: (0.336 0.65 0.331 0.399 0.774 0.636 0.675 0.601 0.49 0.634)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.068
Average program size in population (points): 54.719
Average percent parens in population: 0.303
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.008
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 26404701
--- Timings ---
Current time: 1461796822221 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (653 361 666 607 229 395 316 407 524 349)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (653 361 666 607 229 395 316 407 524 349)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot integer_mod exec_stackdepth () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.493
Median total errors in population: 5
Error averages by case: (0.347 0.639 0.334 0.393 0.771 0.605 0.684 0.593 0.476 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.999
Average program size in population (points): 54.611
Average percent parens in population: 0.304
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.008
Error (vector) diversity:			 0.089
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 27198003
--- Timings ---
Current time: 1461796827759 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (684 374 693 621 246 386 315 404 525 365)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (684 374 693 621 246 386 315 404 525 365)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.387
Median total errors in population: 5
Error averages by case: (0.316 0.626 0.307 0.379 0.754 0.614 0.685 0.596 0.475 0.635)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.988
Average program size in population (points): 54.709
Average percent parens in population: 0.307
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.427
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.427
Total error diversity:				 0.008
Error (vector) diversity:			 0.083
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 28002509
--- Timings ---
Current time: 1461796833317 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (671 374 681 612 249 401 324 386 516 358)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (671 374 681 612 249 401 324 386 516 358)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.428
Median total errors in population: 5
Error averages by case: (0.329 0.626 0.319 0.388 0.751 0.599 0.676 0.614 0.484 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.034
Average program size in population (points): 54.821
Average percent parens in population: 0.306
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.008
Error (vector) diversity:			 0.087
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 28810351
--- Timings ---
Current time: 1461796838948 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (669 378 673 590 241 400 313 412 544 379)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (669 378 673 590 241 400 313 412 544 379)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.401
Median total errors in population: 5
Error averages by case: (0.331 0.622 0.327 0.41 0.759 0.6 0.687 0.588 0.456 0.621)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.064
Average program size in population (points): 54.73
Average percent parens in population: 0.305
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.008
Error (vector) diversity:			 0.087
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 29604222
--- Timings ---
Current time: 1461796844533 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (670 379 673 614 240 386 320 387 540 357)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (670 379 673 614 240 386 320 387 540 357)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.434
Median total errors in population: 5
Error averages by case: (0.33 0.621 0.327 0.386 0.76 0.614 0.68 0.613 0.46 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.354
Average program size in population (points): 55.293
Average percent parens in population: 0.306
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.008
Error (vector) diversity:			 0.094
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 30413464
--- Timings ---
Current time: 1461796850111 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 389 665 617 226 410 343 404 548 354)
Population mean number of elite cases: 4.62
Count of perfect (error zero) individuals by case: (662 389 665 617 226 410 343 404 548 354)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when 28 boolean_flush exec_noop integer_fromboolean integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.382
Median total errors in population: 5
Error averages by case: (0.338 0.611 0.335 0.383 0.774 0.59 0.657 0.596 0.452 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.232
Average program size in population (points): 55.064
Average percent parens in population: 0.307
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.008
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 31222341
--- Timings ---
Current time: 1461796855677 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_yank boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_yank boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (679 367 682 627 225 385 343 398 551 350)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (679 367 682 627 225 385 343 398 551 350)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop boolean_pop) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.393
Median total errors in population: 4
Error averages by case: (0.321 0.633 0.318 0.373 0.775 0.615 0.657 0.602 0.449 0.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.014
Average program size in population (points): 54.872
Average percent parens in population: 0.309
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.008
Error (vector) diversity:			 0.082
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 32031137
--- Timings ---
Current time: 1461796861255 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (666 396 667 641 238 343 335 361 508 347)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (666 396 667 641 238 343 335 361 508 347)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.498
Median total errors in population: 5
Error averages by case: (0.334 0.604 0.333 0.359 0.762 0.657 0.665 0.639 0.492 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.327
Average program size in population (points): 55.385
Average percent parens in population: 0.307
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.008
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 32852079
--- Timings ---
Current time: 1461796866844 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 396 679 639 264 361 347 329 526 396)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (673 396 679 639 264 361 347 329 526 396)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.39
Median total errors in population: 4
Error averages by case: (0.327 0.604 0.321 0.361 0.736 0.639 0.653 0.671 0.474 0.604)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.635
Average program size in population (points): 55.631
Average percent parens in population: 0.305
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.008
Error (vector) diversity:			 0.087
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 33671371
--- Timings ---
Current time: 1461796872508 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 419 673 636 245 358 359 353 503 368)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (673 419 673 636 245 358 359 353 503 368)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) boolean_xor boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec boolean_xor integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.413
Median total errors in population: 4
Error averages by case: (0.327 0.581 0.327 0.364 0.755 0.642 0.641 0.647 0.497 0.632)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.526
Average program size in population (points): 55.308
Average percent parens in population: 0.304
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.008
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 34491263
--- Timings ---
Current time: 1461796878203 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 410 698 666 274 362 343 386 498 387)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (693 410 698 666 274 362 343 386 498 387)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) boolean_xor boolean_or boolean_invert_second_then_and boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) boolean_xor boolean_or boolean_invert_second_then_and boolean_and exec_when 28 boolean_flush exec_noop integer_fromboolean integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.283
Median total errors in population: 4
Error averages by case: (0.307 0.59 0.302 0.334 0.726 0.638 0.657 0.614 0.502 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.562
Average program size in population (points): 55.417
Average percent parens in population: 0.305
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.008
Error (vector) diversity:			 0.092
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 35317976
--- Timings ---
Current time: 1461796883914 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_mult in3 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (684 412 688 640 239 376 344 369 485 383)
Population mean number of elite cases: 4.62
Count of perfect (error zero) individuals by case: (684 412 688 640 239 376 344 369 485 383)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.38
Median total errors in population: 4
Error averages by case: (0.316 0.588 0.312 0.36 0.761 0.624 0.656 0.631 0.515 0.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.056
Average program size in population (points): 54.747
Average percent parens in population: 0.305
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.008
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 36125666
--- Timings ---
Current time: 1461796889473 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (697 398 701 665 243 368 354 381 485 415)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (697 398 701 665 243 368 354 381 485 415)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or boolean_dup boolean_and exec_when (28 boolean_flush boolean_pop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank boolean_or boolean_dup boolean_and exec_when (28 boolean_flush integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.293
Median total errors in population: 4
Error averages by case: (0.303 0.602 0.299 0.335 0.757 0.632 0.646 0.619 0.515 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.682
Average program size in population (points): 55.493
Average percent parens in population: 0.303
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.008
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 36951269
--- Timings ---
Current time: 1461796895028 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times integer_dec integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.316
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_yank integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank integer_yank integer_rot boolean_and exec_when 28 boolean_flush exec_noop integer_fromboolean integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (661 392 663 615 231 328 337 367 493 362)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (661 392 663 615 231 328 337 367 493 362)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Partial simplification: (in3 integer_rot integer_gte in3 integer_yankdup integer_mult in3 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_max exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ()) ())))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.551
Median total errors in population: 5
Error averages by case: (0.339 0.608 0.337 0.385 0.769 0.672 0.663 0.633 0.507 0.638)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.226
Average program size in population (points): 54.798
Average percent parens in population: 0.302
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.008
Error (vector) diversity:			 0.092
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 37762329
--- Timings ---
Current time: 1461796900603 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (695 399 698 639 257 340 359 387 502 408)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (695 399 698 639 257 340 359 387 502 408)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction 28} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in3 integer_rot in1 exec_do*times (integer_dec) integer_yank integer_min in1 exec_do*times (integer_dec) integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Partial simplification: (in3 integer_rot in1 exec_do*times integer_dec integer_yank integer_min in1 exec_do*times integer_dec integer_yank boolean_or integer_rot boolean_and exec_when (28 boolean_flush exec_noop integer_fromboolean) integer_mult in1 exec_do*times (exec_rot () (integer_gte boolean_and integer_gte) (in3 exec_noop integer_fromboolean) integer_mult in1 exec_do*times (integer_gte exec_rot (exec_stackdepth exec_while (exec_rot (integer_mod exec_stackdepth) () ())) () ())))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.316
Median total errors in population: 4
Error averages by case: (0.305 0.601 0.302 0.361 0.743 0.66 0.641 0.613 0.498 0.592)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.669
Average program size in population (points): 55.469
Average percent parens in population: 0.302
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.008
Error (vector) diversity:			 0.092
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 38587285
--- Timings ---
Current time: 1461796906212 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
